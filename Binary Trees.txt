//For a given a Binary Tree of type integer, print the complete information of every node, when traversed in a level-order fashion.

#include<queue>
using namespace std;

void printLevelWise(BinaryTreeNode<int> *root) {
	if(root==NULL){
		return;
	}
	queue<BinaryTreeNode<int>*> q;
	q.push(root);
	while(q.size()!=0){
		BinaryTreeNode<int>* ptr = q.front();
		q.pop();
		cout<<ptr->data<<":L:";
		if(ptr->left==NULL){
			cout<<-1;
		}
		else{
			cout<<ptr->left->data;
			q.push(ptr->left);
		}
		cout<<",R:";
		if(ptr->right==NULL){
			cout<<-1;
		}
		else{
			cout<<ptr->right->data;
			q.push(ptr->right);
		}
		cout<<endl;
	}
}

//For a given Binary Tree of type integer and a number X, find whether a node exists in the tree with data X or not.

bool isNodePresent(BinaryTreeNode<int> *root, int x) {
    if(root==NULL){
        return false;
    }
    if(root->data==x){
        return true;
    }
    if(isNodePresent(root->left, x)||isNodePresent(root->right, x)){
        return true;
    }
    return false;
}

//For a given Binary Tree of integers, find and return the height of the tree.

int height(BinaryTreeNode<int>* root) {
    int h = 0, temp1,temp2;
	if(root==NULL){
		return 0;
	}
	temp1 = height(root->left);
	if(temp1>h){
		h = temp1;
	}
	temp2 = height(root->right);
	if(temp2>h){
		h = temp2;
	}
	return 1+h;
}

//For a given Binary Tree of type integer, update it with its corresponding mirror image.

void mirrorBinaryTree(BinaryTreeNode<int>* root) {
    if(root==NULL){
		return;
	}
	if(root->left==NULL && root->right==NULL){
		return;
	}
	mirrorBinaryTree(root->left);
	mirrorBinaryTree(root->right);
	BinaryTreeNode<int>* temp = root->left;
	root->left = root->right;
	root->right = temp;
}

//You are given the root node of a binary tree.Print its preorder traversal.

void preOrder(BinaryTreeNode<int> *root) {
	if(root==NULL){
		return;
	}
	cout<<root->data<<" ";
	preOrder(root->left);
	preOrder(root->right);
}

//For a given Binary Tree of integers, print the post-order traversal.

void postOrder(BinaryTreeNode<int> *root) {
  if (root == NULL) {
    return;
  }
  
  postOrder(root->left);
  postOrder(root->right);
  cout << root->data << " ";
}

//For a given preorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.

int search(int arr[], int strt, int end, int value) {
  int i;
  for (i = strt; i <= end; i++) {
    if (arr[i] == value)
      return i;
  }
}

BinaryTreeNode<int> *buildTree1(int inorder[], int preorder[], int inStrt, int inEnd) {
  static int preIndex = 0;

  if (inStrt > inEnd)
    return NULL;

  /* Pick current node from Preorder
  traversal using preIndex
  and increment preIndex */
  BinaryTreeNode<int> *tNode = new BinaryTreeNode<int>(preorder[preIndex++]);

  /* If this node has no children then return */
  if (inStrt == inEnd)
    return tNode;

  /* Else find the index of this node in Inorder traversal */
  int inIndex = search(inorder, inStrt, inEnd, tNode->data);

  /* Using index in Inorder traversal, construct left and
  right subtress */
  tNode->left = buildTree1(inorder, preorder, inStrt, inIndex - 1);
  tNode->right = buildTree1(inorder, preorder, inIndex + 1, inEnd);

  return tNode;
}

/* UTILITY FUNCTIONS */
/* Function to find index of value in arr[start...end]
The function assumes that value is present in in[] */

BinaryTreeNode<int> *buildTree(int *preorder, int preLength, int *inorder, int inLength) {
	return buildTree1(inorder, preorder, 0, inLength-1);
}

//For a given a Binary Tree of type integer, find and return the minimum and the maximum data values.
Return the output as an object of Pair class, which is already created.

#include<climits>
using namespace std;

pair<int, int> getMinAndMax(BinaryTreeNode<int> *root) {
	
	if(root==NULL){
		pair<int,int> p;
		p.first = INT_MAX;
		p.second = INT_MIN;
		return p;
	}

    pair<int,int> p1 = getMinAndMax(root->left);
	pair<int,int> p2 = getMinAndMax(root->right);

    int max = root->data;
	if(p1.second>max){
		max = p1.second;
	}
	if(p2.second>max){
		max = p2.second;
	}

	int min = root->data;
    if (p1.first < min) {
        min = p1.first;
    }
    if (p2.first < min) {
        min = p2.first;
    }
    pair<int,int> pr;

	pr.first = min;
	pr.second = max;
	return pr;
	
}

//For a given Binary Tree of integers, find and return the sum of all the nodes data.

int getSum(BinaryTreeNode<int>* root) {
    if(root==NULL){
		return 0;
	}
	int sum=0;

	int a = getSum(root->left);
	int b = getSum(root->right);
	
	sum = a+b;
	return sum+root->data;
	
}

//Given a binary tree, check if it is balanced. Return true if given binary tree is balanced, false otherwise.

#include <bits/stdc++.h>
#include <iostream>
using namespace std;

int height(BinaryTreeNode<int> *root){
	if(root==NULL){
		return 0;
	}
	return 1+max(height(root->left),height(root->right));
}

bool isBalanced(BinaryTreeNode<int> *root) {
	if(root==NULL){
		return true;
	}
	int hl = height(root->left);
	int hr = height(root->right);
    if (abs(hl-hr) <= 1 && isBalanced(root->left) &&isBalanced(root->right)){
		return true;
	}
	return false;
        
}

//For a given a Binary Tree of type integer, print it in a level order fashion where each level will be printed on a new line. Elements on every level will be printed in a linear fashion and a single space will separate them.

#include<queue>
using namespace std;


void printLevelWise(BinaryTreeNode<int> *root) {
    if(root==NULL){
		return;
	}
	queue<BinaryTreeNode<int>*> q;
	q.push(root);
	q.push(NULL);
	while(q.size()!=0){
		BinaryTreeNode<int>* temp = q.front();
		q.pop();
		if(temp == NULL){
			if(q.size()!=0){
				q.push(NULL);
			}
			cout<<endl;
			continue;
		}
		cout<<temp->data<<" ";
		if(temp->left!=NULL){
			q.push(temp->left);
		}
		if(temp->right){
			q.push(temp->right);
		}
	}
}

//Given a binary tree, remove all leaf nodes from it. Leaf nodes are those nodes, which don't have any children.

BinaryTreeNode<int>* removeLeafNodes(BinaryTreeNode<int> *root) {
    
	/*if(root==NULL){
		return NULL;
	}
	if(root->right==NULL && root->left==NULL){
		root = NULL;
	}
	root->left = removeLeafNodes(root->left);
	root->right = removeLeafNodes(root->right);
	return root;
	*/
        if (root == NULL)
          return NULL;
        if (root->left == NULL && root->right == NULL) {
          free(root);
          return NULL;
        }

        // Else recursively delete in left and right
        // subtrees.
        root->left = removeLeafNodes(root->left);
        root->right = removeLeafNodes(root->right);

        return root;
}

//Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of each level linked list.

#include<queue>
#include<vector>
using namespace std;

vector<Node<int>*> constructLinkedListForEachLevel(BinaryTreeNode<int> *root) {
  if (root == NULL) {
    vector<Node<int>*> v;
    return v;
  }
  queue<BinaryTreeNode<int> *> q;
  vector<Node<int>*> v;
  Node<int>* head = NULL;
  Node<int>* tail = NULL;
  q.push(root);
  q.push(NULL);
  while (q.size() != 0) {
    BinaryTreeNode<int> *temp = q.front();
    q.pop();
    if (temp == NULL) {
      if (q.size() != 0) {
        q.push(NULL);
      }
      v.push_back(head);
      head = NULL;
      tail = NULL;
      continue;
    }
    else{
      Node<int>* newnode = new Node<int>(temp->data);
      if(head==NULL){
        head = newnode;
        tail = newnode;
      }
      else{
        tail->next = newnode;
        tail = tail->next;
      }
    }
    if (temp->left != NULL) {
      q.push(temp->left);
    }
    if (temp->right) {
      q.push(temp->right);
    }
  }
  return v;
}

//Given a binary tree, print the zig zag order. In zigzag order, level 1 is printed from left to right, level 2 from right to left and so on. This means odd levels should get printed from left to right and even level right to left.

#include <stack>
using namespace std;

void zigZagOrder(BinaryTreeNode<int> *root) {
    if(root==NULL){
		return;
	}
	stack<BinaryTreeNode<int>*> s1;
	stack<BinaryTreeNode<int>*> s2;
	s1.push(root);
	while(s1.size()!=0 || s2.size()!=0){
		while(s1.size()!=0){
			BinaryTreeNode<int> *top = s1.top();
			s1.pop();
			cout<<top->data<<" ";
			if(top->left!=NULL){
				s2.push(top->left);
			}
			if(top->right!=NULL){
				s2.push(top->right);
			}
		}
		cout<<endl;
		while(s2.size()!=NULL){
			BinaryTreeNode<int>* top = s2.top();
			s2.pop();
			cout<<top->data<<" ";
			if(top->right!=NULL){
				s1.push(top->right);
			}
			if(top->left!=NULL){
				s1.push(top->left);
			}
		}
		cout<<endl;
	}
}

//For a given Binary Tree of type integer, print all the nodes without any siblings.

void printNodesWithoutSibling(BinaryTreeNode<int> *root) {
    if(root==NULL){
        return;
    }
    if(root->left!=NULL || root->right!=NULL){
        if(root->right!=NULL && root->left==NULL){
            cout<<root->right->data<<" ";
        }
        else if(root->left==NULL && root->right!=NULL){
            cout<<root->left->data<<" ";
        }
    }
    printNodesWithoutSibling(root->left);
    printNodesWithoutSibling(root->right);
}